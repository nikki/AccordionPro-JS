var fs = require('fs'),

    /* css */
    cssp = require('uglifycss').processString,
    cssfile = '../accordionpro_js/css/accordionpro.css',

    /* js */
    jsp = require('uglify-js').parser,
    pro = require('uglify-js').uglify,
    jsfiles = [
      '../accordionpro_js/js/jquery.swipe.min.js',
      '../accordionpro_js/js/modernizr.custom.min.js',
      '../accordionpro_js/js/animate.min.js',
      '../accordionpro_js/js/jquery.accordionpro.js'
    ];

desc('Compress and concatentate css');
task('css', function() {
  var output = '', css;

  // read file
  css = fs.readFileSync(cssfile).toString();

  // split comment block
  css = css.split('/* build */');
  css[0] += '\n';

  // squidge
  css[1] = cssp(css[1]);

  // concat
  output += css.join('');

  // output
  fs.writeFileSync('accordionpro_js/css/accordionpro.min.css', output);
});

desc('Compress and concatentate js');
task('js', function() {
  var output = '';

  // concat
  jsfiles.map(function(file, index) {
    var js, ast;

    if (!file.match('min')) {
      // read file
      js = fs.readFileSync(file).toString();

      // split comment block
      js = js.split('/* build */');
      js[0] += '\n';

      // squidge code
      ast = jsp.parse(js[1]);
      ast = pro.ast_mangle(ast);
      ast = pro.ast_squeeze(ast);
      js[1] = pro.gen_code(ast) + ';';

      // concat
      output += js.join('');
    } else {
      // concat
      output += fs.readFileSync(file) + '\n\n';
    }
  });

  // output
  fs.writeFileSync('accordionpro_js/js/jquery.accordionpro.min.js', output);
});

desc('Run all tasks');
task('default', function() {
  jake.Task['css'].execute();
  jake.Task['js'].execute();
});